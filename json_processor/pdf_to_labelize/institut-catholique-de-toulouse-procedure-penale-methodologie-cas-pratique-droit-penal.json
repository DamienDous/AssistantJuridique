def recherche_multi_studocu(driver, requetes, csv_output):
    liens_total = []
    existing_urls = set()  # Ensemble pour stocker les URLs déjà présentes dans le fichier CSV

    # Ouvrir le fichier CSV en mode lecture pour récupérer les URLs existantes
    try:
        with open(csv_output, "r", encoding="utf-8-sig") as f:
            reader = csv.DictReader(f, delimiter=";")
            for row in reader:
                existing_urls.add(row["url"])  # Ajouter les URLs existantes à l'ensemble
    except FileNotFoundError:
        # Si le fichier n'existe pas, nous commencerons avec un fichier vide
        pass

    # Recherche des liens pour chaque requête
    for requete in requetes:
        liens = recherche_studocu(driver, requete)
        for url in liens:
            if url not in existing_urls:  # Vérifier si l'URL n'est pas déjà dans le fichier
                liens_total.append({
                    "requete": requete,
                    "url": url
                })
                existing_urls.add(url)  # Ajouter l'URL à l'ensemble pour éviter les doublons

        # Petite pause entre les requêtes
        random_sleep(random.uniform(2, 4))

    # Écriture dans le fichier CSV
    with open(csv_output, "a", encoding="utf-8-sig", newline='') as f:
        writer = csv.DictWriter(f, fieldnames=["requete", "url"], delimiter=";")
        # Si le fichier est vide, écrire l'en-tête
        if f.tell() == 0:
            writer.writeheader()
        writer.writerows(liens_total)

    print(f"✅ Fichier CSV mis à jour : {csv_output} ({len(liens_total)} liens ajoutés)")